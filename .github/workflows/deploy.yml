name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        cd client && npm ci
    
    - name: Build client
      run: cd client && npm run build
    
    - name: Check for build artifacts
      run: |
        ls -la client/dist/
        test -f client/dist/index.html
    
    # Optional: Add tests here
    # - name: Run tests
    #   run: npm test

  docker-build:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/transcribe-app:latest
          ${{ secrets.DOCKER_USERNAME }}/transcribe-app:${{ github.sha }}
        cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/transcribe-app:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/transcribe-app:buildcache,mode=max

  # Optional: Auto-deploy to your VPS
  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: docker-build
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
  #   
  #   steps:
  #   - name: Deploy to VPS
  #     uses: appleboy/ssh-action@master
  #     with:
  #       host: ${{ secrets.VPS_HOST }}
  #       username: ${{ secrets.VPS_USERNAME }}
  #       key: ${{ secrets.VPS_SSH_KEY }}
  #       script: |
  #         cd /opt/transcribe-app
  #         docker-compose pull
  #         docker-compose up -d
  #         docker system prune -f
